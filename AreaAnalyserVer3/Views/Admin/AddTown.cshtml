@model AreaAnalyserVer3.Models.Town

@{
    ViewBag.Title = "Add Town";
}

<h2>Add Town to database</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
       
        <div class="form-group">
            @Html.Label("Search for town", htmlAttributes: new { @class = "control-label col-md-2" })
            <div id="locationField" class="col-md-10">
                <input id="autocomplete" class = "form-control" placeholder="Enter your address"
                       onFocus="geolocate()" type="text">
            </div>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @id = "address", placeholder = "Enter town name" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.County, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.County, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownListFor(model => model.County, (SelectList)ViewBag.County, "Choose county...", new { @class = "form-control" })
                @*@Html.ValidationMessageFor(model => model.County, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Latitude", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Editor("Latitude", new { htmlAttributes = new { @class = "form-control", @id = "lat" } })
                @*@Html.ValidationMessageFor(model => model.GeoLocation, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Longitude", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.Editor("Longitude", new { htmlAttributes = new { @class = "form-control", @id = "long" } })
                @*@Html.ValidationMessageFor(model => model.GeoLocation, "", new { @class = "text-danger" })*@
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.GeoLocation, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.GeoLocation, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.GeoLocation, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add Town" class="btn btn-success" />
            </div>
        </div>
    </div>
    }

    <div>
        @Html.ActionLink("Back to Admin", "AdminSecure")
    </div>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBrhbqEZBoAebuzCTde9t8agomyfnRcM9s&libraries=places"></script>

    <script type="text/javascript">


        google.maps.event.addDomListener(window, 'load', function () {
            function geolocate() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var geolocation = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        var circle = new google.maps.Circle({
                            center: geolocation,
                            radius: position.coords.accuracy
                        });
                        autocomplete.setBounds(circle.getBounds());
                    });
                }
            }

            var places = new google.maps.places.Autocomplete(document.getElementById('autocomplete'));
            google.maps.event.addListener(places, 'place_changed', function () {
                var place = places.getPlace();
                var address = place.formatted_address;
                var locality = place.locality;
                var colloquial_area = place.colloquial_area;
                var latitude = place.geometry.location.lat();
                var longitude = place.geometry.location.lng();
                var mesg = "Address: " + address;
                mesg += "\nLatitude: " + latitude;
                mesg += "\nLongitude: " + longitude;
                mesg += "\colloquial_area: " + colloquial_area;
                mesg += "\locality: " + locality;
                alert(mesg);
                $("#lat").val(latitude);
                $("#long").val(place.geometry.location.lng());
            });
        });
    </script>